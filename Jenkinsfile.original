node('default') {

    def GIT_COMMIT
    def GIT_MSG
    def BUILD_ID

    try {

        notifyBuild('STARTED')

        stage('Checkout') {

          checkout scm
          GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim().take(6)
          // If last commit msg start with: [pushimage]
          GIT_MSG = sh(returnStdout: true, script: 'git log --format=%B -n 1 HEAD').trim().take(11)
          BUILD_ID = "${env.BRANCH_NAME}${GIT_COMMIT}".toLowerCase().replace('-', '')
        }

        stage('Build test image') {

          sh("docker build -t onnode-${BUILD_ID} -f etc/env/ci/node/Dockerfile.test .")
        }

        stage('Up') {

          sh("docker run -d --name onnode-${BUILD_ID} onnode-${BUILD_ID} yarn start:ci")
        }

        stage('Test') {

          parallel(
            "Lint": {

                sh("docker exec onnode-${BUILD_ID} yarn lint")
            },
            "Unit": {

                sh("docker exec onnode-${BUILD_ID} yarn test")
            },
            "ESDoc": {

                sh("docker exec onnode-${BUILD_ID} yarn run esdoc")
            }
          )

          sh("docker rm -f node-${BUILD_ID}")
          sh("docker rmi node-${BUILD_ID}")
        }

        bitbucketStatusNotify buildState: "SUCCESS"

        currentBuild.result = "SUCCESS"
        notifyBuild('SUCCESS')

        if ( env.BRANCH_NAME ==~ /develop/ || env.BRANCH_NAME ==~ /master/  || GIT_MSG == '[pushimage]' ) {

        switch(env.BRANCH_NAME) {
          case "master":
            environment = "staging"
            namespace = "default"
            break
          default:
            environment = "dev"
            namespace = "dev"
            break
        }

          notifyBuild('DEPLOYMENT')

          stage('Build develop image') {

            sh("docker build -t onnode-dev-${BUILD_ID} -f etc/env/ci/node/Dockerfile.dev .")

            sh("docker run -d --name onnode-dev-${BUILD_ID} onnode-dev-${BUILD_ID} sleep 9999")

            sh("docker exec onnode-dev-${BUILD_ID} yarn build:dev")

            sh("mkdir -p dist")

            sh("docker cp onnode-dev-${BUILD_ID}:/code/dist/ dist")

            sh("docker build -t gcr.io/project-id/front:${GIT_COMMIT}-dev -f etc/env/ci/nginx/Dockerfile .")
          }

          stage('Build staging image') {

            sh("docker build -t onnode-staging-${BUILD_ID} -f etc/env/ci/node/Dockerfile.default .")

            sh("docker run -d --name onnode-staging-${BUILD_ID} node-staging-${BUILD_ID} sleep 9999")

            sh("docker exec onnode-staging-${BUILD_ID} yarn build")

            sh("rm -rf dist && mkdir -p dist")

            sh("docker cp onnode-staging-${BUILD_ID}:/code/dist/ dist")

            sh("docker build -t gcr.io/project-id/front:${GIT_COMMIT}-staging -f etc/env/ci/nginx/Dockerfile .")
          }

          stage('Build production image') {

            sh("docker build -t node-prod-${BUILD_ID} --build-arg API_KEY=${env.front_PROD_KEY} -f etc/env/ci/node/Dockerfile .")

            sh("docker run -d --name node-prod-${BUILD_ID} node-prod-${BUILD_ID} sleep 9999")

            sh("docker exec onnode-prod-${BUILD_ID} yarn build")

            sh("rm -rf dist && mkdir -p dist || true")

            sh("docker cp node-prod-${BUILD_ID}:/code/dist/ dist")

            sh("docker build -t gcr.io/project-id/front:${GIT_COMMIT}-production -f etc/env/ci/nginx/Dockerfile .")
          }

          stage('Store image') {

            sh "docker login -u _json_key -p \"`cat /tmp/keyfile.json)`\" https://gcr.io"

            sh "docker push gcr.io/project-id/front:${GIT_COMMIT}-dev"
            sh "docker push gcr.io/project-id/front:${GIT_COMMIT}-staging"
            sh "docker push gcr.io/project-id/front:${GIT_COMMIT}-production"
          }

          stage('Deployment') {

            try {

              sh "kubectl set image deploy/front front=gcr.io/project-id/front:${GIT_COMMIT}-${environment} --namespace=${namespace}"
              notifyBuild('DEPLOYMENT_SUCCESS')

            } catch(Exception ex) {

              notifyBuild('DEPLOY_FAILURE')
              throw ex
            }
          }
        }

    } catch (Exception e) {

        bitbucketStatusNotify buildState: "FAILURE"

        currentBuild.result = "FAILURE"

        notifyBuild('FAILURE')

        throw e
    } finally {

      stage('Clean') {

        sh "docker rm -f node-${BUILD_ID}|| true"
        sh "docker rm -f node-staging-${BUILD_ID}|| true"
        sh "docker rm -f node-production-${BUILD_ID}|| true"
      }
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus = buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED' || buildStatus == 'DEPLOYMENT' ) {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS' || buildStatus == 'DEPLOYMENT_SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notification
  hipchatSend (color: color, notify: true, message: summary)
}
